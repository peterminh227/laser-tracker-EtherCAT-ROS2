///////////////////////////////////////////////////////////////////////////////
// UDP_sender.cpp
#include "TcPch.h"
#pragma hdrstop

#include "UDP_sender.h"
#include "LaserTrackerUDP_senderVersion.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CUDP_sender
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CUDP_sender
BEGIN_INTERFACE_MAP(CUDP_sender)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_ITcIoUdpProtocolRecv, ITcIoUdpProtocolRecv)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CUDP_sender, VID_LaserTrackerUDP_sender, CID_LaserTrackerUDP_senderCUDP_sender)
IMPLEMENT_ITCOMOBJECT(CUDP_sender)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CUDP_sender)
IMPLEMENT_ITCADI(CUDP_sender)
IMPLEMENT_ITCWATCHSOURCE(CUDP_sender)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CUDP_sender 
BEGIN_SETOBJPARA_MAP(CUDP_sender)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_UDP_senderParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_UDP_senderUdpProt, m_spUdpProt)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CUDP_sender 
BEGIN_GETOBJPARA_MAP(CUDP_sender)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_UDP_senderParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_UDP_senderUdpProt, m_spUdpProt)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CUDP_sender
BEGIN_OBJPARAWATCH_MAP(CUDP_sender)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CUDP_sender
BEGIN_OBJDATAAREA_MAP(CUDP_sender)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_UDP_senderInputs, m_Inputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CUDP_sender::CUDP_sender()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_TraceLevelMax(tlAlways)
	, m_counter(0)
	, meas_data()

{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CUDP_sender::~CUDP_sender() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CUDP_sender)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CUDP_sender::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code
	client_ipaddr = 0;
	client_ipaddr += static_cast<ULONG>(192) << 24;
	client_ipaddr += static_cast<ULONG>(168) << 16;
	client_ipaddr += static_cast<ULONG>(0) << 8;
	client_ipaddr += static_cast<ULONG>(123);
	m_udpPort = 10000;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CUDP_sender::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization
	if (SUCCEEDED(hr) && m_spUdpProt.HasOID())
	{
		m_Trace.Log(tlInfo, FLEAVEA "Register UdpProt");
		if (SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spUdpProt)))
		{
			m_Trace.Log(tlInfo, FLEAVEA "Server: UdpProt listen to Port: %d", m_udpPort);
			if (FAILED(hr = m_spUdpProt->RegisterReceiver(m_udpPort, THIS_CAST(ITcIoUdpProtocolRecv))))
			{
				m_Trace.Log(tlError, FLEAVEA "Server: UdpProt RegisterReceiver failed on Port: %d", m_udpPort);
				m_spUdpProt = NULL;
			}
		}
	}

	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CUDP_sender::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization
	if (m_spUdpProt != NULL)
		m_spUdpProt->UnregisterReceiver(m_udpPort);
	m_spUdpProt = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CUDP_sender::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CUDP_sender::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// TODO: Replace the sample with your cyclic code
	//m_counter+=m_Inputs.Value;
	//m_Outputs.Value=m_counter;

	//m_spUdpProt->CheckReceived(); // ADDED
	meas_data.set_position(m_Inputs.Distance, m_Inputs.AngleHz, m_Inputs.AngleVt);
	meas_data.set_orientation(m_Inputs.Quaternion0, m_Inputs.Quaternion1, m_Inputs.Quaternion2, m_Inputs.Quaternion3);

	HRESULT hr2 = S_OK;
	PVOID pData = &meas_data;
	ULONG nData = sizeof(LaserTrackerMeasurement);

	hr2 = m_spUdpProt->SendData(client_ipaddr, m_udpPort, m_udpPort, nData, pData, true);

	m_Trace.Log(tlInfo, FLEAVEA "send data status hr=0x%08x", hr2);

	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CUDP_sender::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CUDP_sender::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}


///<AutoGeneratedContent id="ImplementationOf_ITcIoUdpProtocolRecv">
HRESULT CUDP_sender::ReceiveData(ULONG ipAddr, USHORT udpDestPort, USHORT udpSrcPort, ULONG nData, PVOID pData, ETYPE_VLAN_HEADER* pVlan)
{
	HRESULT hr = E_NOTIMPL;
	HRESULT hr2 = S_OK;
	hr2 = m_spUdpProt->SendData(ipAddr, udpSrcPort, udpDestPort, nData, pData, true);
	//m_Trace.Log(tlInfo, FLEAVEA "UDP ReceiveData: IP: %d.%d.%d.%d udpSrcPort: %d DataSize: %d (hr2=%x) \n", ((PBYTE)&ipAddr)[3], ((PBYTE)&ipAddr)[2], ((PBYTE)&ipAddr)[1], ((PBYTE)&ipAddr)[0], udpSrcPort, nData, hr2);
	return hr;
}
///</AutoGeneratedContent>
